{"./":{"url":"./","title":"首页","keywords":"","body":"前言 如若转载请标明出处. Copyright © qc.com 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-07-07 14:56:40 "},"installation.html":{"url":"installation.html","title":"备份变量数据到调试电脑","keywords":"","body":"GitBook安装 下面介绍在本地如何安装 GitBook，如果不需要本地调试 & 不需要获得生成的 html 文件，可以直接使用 官网 提供的服务。 环境要求 通过NPM安装 编辑书籍 预览书籍 环境要求 NodeJS(v4.0.0及以上) 通过NPM安装 运行下面的命令进行安装 npm install gitbook-cli -g 其中gitbook-cli是gitbook的一个命令行工具, 通过它可以在电脑上安装和管理gitbook的多个版本. 编辑书籍 gitbook 官方已经提供了一个本地的编辑器, 使用它可以方便的编写书籍(不需要手动的写SUMMARY.md), 并且支持windows、mac、linux 三种平台, 所以强烈建议使用编辑器编写书籍. 预览书籍 使用下列命令会运行一个服务器, 通过http://localhost:4000/可以预览书籍 gitbook serve 运行该命令后会在书籍的文件夹中生成一个 _book 文件夹, 里面的内容即为生成的 html 文件. 我们可以使用下面命令来生成网页而不开启服务器 gitbook build Copyright © qc.com 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-07-07 10:07:51 "},"commands.html":{"url":"commands.html","title":"Codesys软件显示模糊如何解决","keywords":"","body":"命令 这里主要介绍一下 GitBook 的命令行工具 gitbook-cli 的一些命令, 首先说明两点: gitbook-cli 和 gitbook 是两个软件 gitbook-cli 会将下载的 gitbook 的不同版本放到 ~/.gitbook中, 可以通过设置GITBOOK_DIR环境变量来指定另外的文件夹 列出gitbook所有的命令 gitbook help 输出gitbook-cli的帮助信息 gitbook --help 生成静态网页 gitbook build 生成静态网页并运行服务器 gitbook serve 生成时指定gitbook的版本, 本地没有会先下载 gitbook build --gitbook=2.0.1 列出本地所有的gitbook版本 gitbook ls 列出远程可用的gitbook版本 gitbook ls-remote 安装对应的gitbook版本 gitbook fetch 标签/版本号 更新到gitbook的最新版本 gitbook update 卸载对应的gitbook版本 gitbook uninstall 2.0.1 指定log的级别 gitbook build --log=debug 输出错误信息 gitbook builid --debug Copyright © qc.com 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-07-07 10:07:51 "},"structure.html":{"url":"structure.html","title":"工控机程序离线导入方法","keywords":"","body":"目录结构 GitBook 基本的目录结构如下所示 . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md 这里主要讲下 GitBook 预定义的几个文件的作用 book.json 存放配置信息，在下一章中所讲的配置信息都是在这个文件里定义的，关于该文件的配置可以看 配置 这个章节。 Summary 概要文件主要存放 GitBook 的文件目录信息，左侧的目录就是根据这个文件来生成的，默认对应的文件是 SUMMARY.md，可以在 book.json 重新定义该文件的对应值。它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例： # Summary * [Introduction](README.md) * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) 这个配置对应的目录结构如下所示: 我们通过使用 标题 或者 水平分割线 标志将 GitBook 分为几个不同的部分 # Summary ### Part I * [Introduction](README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### Part II * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) ---- * [Last part without title](part3/title.md) 这个配置对应的目录结构如下所示： Glossary 词汇表文件，默认对应的文件是 GLOSSARY.md。该文件主要存储词汇信息，如果在其他页面中出现了该文件中的词汇，鼠标放到词汇上会给出词汇示意，可以将鼠标移到下面两个词汇上看下效果。 Git    Markdown Glossary 文件的格式如下所示： ## Git 分散式版本控制软件 ## Markdown Aaron Swartz 跟John Gruber共同设计的排版语言 Copyright © qc.com 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-07-07 10:07:51 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Git 分散式版本控制软件 Markdown Aaron Swartz 跟John Gruber共同设计的排版语言 Copyright © qc.com 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-07-07 10:07:51 "}}